// // 如果一段数据包括多种类型（比如服务器传来的HTTP数据）
// // 这时除了建立ArrayBuffer对象的复合视图以外，还可以 通过DataView视图进行操作

// // DataView支持设定字节序，本来，在设计目的上
// // ArrayBuffer对象的各种TypedArray视图，是用来向网卡，声卡本机设备传送数据
// // 所以使用本机的字节序就可以了
// // 而DataView视图的设计目的，就是来处理网络设备传来的数据
// // 所以大端字节序或小端字节序都可以自行设定

// // 下面是基础语法
// const buffer = new ArrayBuffer(24);
// const dv = new DataView(buffer);

// // DataView实例提供8个方法读取内存
// // 这一系列get方法的参数都是一个字节序号，表示从哪个字节开始读取
// // 从第一个字节读取一个8位无符号整数
// const v1 = dv.getUint8(0);

// // 从第二个字节读取一个16位无符号整数
// const v2 = dv.getUint16(1);

// // 从第四个字节读取一个16位无符号整数
// const v3 = dv.getUint16(3);

// // 默认情况是使用大端字节序，如果要使用小端字节序，要指定第二个 参数
// const v4 = dv.getUint8(5, true);

// // DataView视图提供8个方法写入内存
// // 这一系列set方法，接受两个参数
// // 第一个参数是字节序号，表示从哪个字节开始写入
// // 第二个参数是为写入的数据
// // 如果要指定字节序，需要指定第三个参数，true为小端字节序

// // 在第1个字节，以大端字节序写入值为25的32位整数
// dv.setInt32(0, 25, false);

// // 在第5个字节，以大端字节序写入值为25的32位整数
// dv.setInt32(4, 25);

// // 在第9个字节，以小端字节序写入值为2.5的32位浮点数
// dv.setFloat32(8, 2.5, true);
